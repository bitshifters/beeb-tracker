\ ******************************************************************
\ * Beeb Tracker
\ * Music player & visualiser in MODE 7
\ * Kieran Connell & Simon Morris
\ * Demo team name TBD! :)
\ ******************************************************************

\\ Common global defines
INCLUDE "bbc.h.6502"

\ ******************************************************************
\ *	Define compilation flags
\ ******************************************************************

CODE_ORIGIN = &1100					; assuming standard BBC Micro DFS this is safe!
_DEBUG = TRUE						; include extra stuff for debugging

COMPILE_OPTION_EXIT = FALSE			; enable "Exit" in selection menu



\ ******************************************************************
\ *	Define global constants
\ ******************************************************************




\ ******************************************************************
\ *	Define app constants
\ ******************************************************************

\\ Number of entries in our file table
NUM_vgm_files = 12


\ ******************************************************************
\ *	Define fast (zero page) runtime variables
\ ******************************************************************

\\ Our own app variables
ORG &00
GUARD &9F							; user ZP + econet ZP


\\ Any includes here can declare ZP vars from the pool using SKIP
INCLUDE "exomiser.h.6502"
INCLUDE "vgmplayer.h.6502"
INCLUDE "beebtracker.h.6502"



\ ******************************************************************
\ *	Start address to be saved
\ ******************************************************************

ORG CODE_ORIGIN						; code origin - assume standard BBC Micro
GUARD MODE7_base_addr				; ensure code size doesn't hit start of screen memory

.start


\ ******************************************************************
\ *	Code entry
\ ******************************************************************

INCLUDE "exomiser.s.6502"
INCLUDE "vgmplayer.s.6502"
INCLUDE "beebtracker.s.6502"

\ ******************************************************************
\ *	Main loop including high-level state machine
\ ******************************************************************

.main
{
\\ ***** System initialise ***** \\

	\\ *FX 200,3 - clear memory on break as we use OS memory areas and can cause nasty effects
	LDA #200
	LDX #3
	JSR osbyte			

	\\ Set MODE 7
	LDA #22: JSR oswrch
	LDA #7: JSR oswrch

	\\ Turn off cursor by directly poking crtc
	SEI
	LDA #10: STA &FE00
	LDA #32: STA &FE01
	CLI

	\\ Debounce
	LDA #&FF
	STA menu_key_held

	\\ Load first file in our list
	LDA #0
	STA file_no


	\\ Intro screen goes here \\

	
\\ ***** Loading state ***** \\

	.loading_state
	{
		\\ Clear screen
		LDA #12: JSR oswrch
		JSR teletexel_init

		\\ Init scrolltext with loading message
		LDA #LO(load_message):LDX #HI(load_message)
		LDY #11:JSR init_scr

		\\ Start our event driven fx
		ldx #LO(load_eventv)
		ldy #HI(load_eventv)
		JSR start_eventv

		\\ Blocking file load
		JSR load_file_from_table
		PHA							; store return value

		\\ Kill our event driven fx
		JSR stop_eventv

		\\ Returned error?
		PLA
		BEQ no_error

		\\ Handle error (exit)
		JMP return
		
		.no_error
	}

\\ ***** Demo (Tracker) state ***** \\

	\\ Initialise demo state
	JSR init_demo

	.enter_demo_state

	\\ Technically should populate the tracker display with genuine music data here!
	\\ But at 20ms per line it fills up with data in a 140ms so is hardly noticable...

	\\ Demo loop
	.demo_loop
	{
		\\ Check for pressed keys
		LDA #121
		LDX #&10
		JSR osbyte

		\\ Still holding same key
		CPX menu_key_held
		BEQ no_key_pressed

		\\ Remember current key
		STX menu_key_held

		\\ Any key pressed?
		CPX #&FF
		BEQ no_key_pressed

		\\ Check escape
		CPX #MENU_key_toggle
		BEQ enter_menu_state

		.no_key_pressed

		\\ Poll the music player
		LDA player_ended
		BNE song_ended

		\\ Wait for vsync - NO LONGER WAITING FOR VSYNC
		;LDA #19
		;JSR osbyte

		\\ Actually sync to audio instead
		LDA player_counter
		.wait_for_audio_sync
		CMP player_counter
		BEQ wait_for_audio_sync

		\\ At this point we know audio data has just been sent to SN
		\\ So all of our vars from the player are fresh
		\\ Use these to render our demo FX (before next vsync!)
		\\ May still want to do something clever to avoid flicker

		\\ Poll tracker
		JSR poll_tracker

		\\ Poll our VU effects
		LDA #&FF				; we do want beat bars
		JSR poll_fx

		\\ Update scrolltext
		JSR poll_scr

		\\ Loop
		JMP demo_loop

		.song_ended

		\\ Deinitialise demo state
		JSR deinit_demo

		\\ Increment file in table
		LDX file_no
		INX
		CPX #NUM_vgm_files
		BCC next_file
		LDX #0
		.next_file
		STX file_no

		\\ Automatically load next file
		JMP loading_state
	}

\\ ***** Menu state ***** \\

	.enter_menu_state

	\\ Initialise menu state

	JSR init_menu
	JSR menu_populate

	\\ Menu loop
	.menu_loop
	{
		\\ Check for pressed keys
		LDA #121
		LDX #&10
		JSR osbyte

		\\ Still holding same key
		CPX menu_key_held
		BEQ no_key_pressed

		\\ Remember current key
		STX menu_key_held

		\\ Any key pressed?
		CPX #&FF
		BEQ no_key_pressed

		\\ Check escape
		CPX #MENU_key_toggle
		BNE not_escape

		\\ Handle toggle key
		\\ Revert file no
		LDA menu_old_file
		STA file_no

		\\ Cancel menu
		.cancel_menu
		JSR deinit_menu
		JMP enter_demo_state

		.not_escape
		CPX #MENU_key_up
		BNE not_up

		\\ Handle up key
		\\ Decrement file_no no lower than 0
		LDA file_no
		BEQ not_up
		DEC file_no

		\\ Update our menu on screen
		JSR menu_populate
		JMP no_key_pressed

		.not_up
		CPX #MENU_key_down
		BNE not_down

		\\ Handle down
		\\ Increment file_no up to MAX
		LDA file_no
		IF COMPILE_OPTION_EXIT
		CMP #NUM_vgm_files
		ELSE
		CMP #NUM_vgm_files - 1
		ENDIF
		BEQ not_down
		INC file_no

		\\ Update our menu on screen
		JSR menu_populate
		JMP no_key_pressed

		.not_down
		CPX #MENU_key_select
		BNE not_select

		\\ Handle select key
		\\ Check if we're on the same track
		LDA file_no
		CMP menu_old_file
		BEQ cancel_menu

		\\ Deinit the menu
		JSR deinit_menu

		\\ Deinit the demo
		JSR deinit_demo

		\\ Either file load or exit
		LDA file_no
		CMP #NUM_vgm_files
		BEQ exit_app

		\\ Load new file
		JMP loading_state

		.not_select
		.no_key_pressed

		\\ If track has ended just keep menu around until user action
		LDA player_ended
		BEQ sync_to_audio
		
		\\ If no audio then sync to vsync instead!
		LDA #19
		JSR osbyte
		BNE skip_audio_sync

		\\ Sync to audio
		.sync_to_audio
		LDA player_counter
		.wait_for_audio_sync
		CMP player_counter
		BEQ wait_for_audio_sync

		.skip_audio_sync

		\\ Poll our VU effects
		LDA #0					; we don't want beat bars
		JSR poll_fx

		\\ Update scrolltext
		JSR poll_scr

		\\ Loop
		JMP menu_loop

		.exit_app
	}

\\ ***** Exit app entirely ***** \\

	\\ Credits / Outro screen goes here \\

	\\ Exit cleanly - tidy up anything else here!
	LDA #12: JSR oswrch

	\\ Would be nice to clear escape state and issue BASIC NEW to avoid "Bad Program" error

	.return
	RTS
}



.code_end


\ ******************************************************************
\ *	Stored data
\ ******************************************************************

.data_start
.menu_data_start

\\ No longer require loading_table but each entry must be exactly 8 bytes
\\ Does not have to be aligned but entries have to be fixed size
\\ This isn't actually any smaller than using pointer tables but fewer things to type I suppose :)

.vgm_filenames
EQUS "master", 13,0
EQUS "except", 13,0
EQUS "fluid", 13,0,0
EQUS "ice", 13,0,0,0,0
EQUS "sonic", 13,0,0
EQUS "pharoah", 13
EQUS "magic", 13,0,0
EQUS "sorry", 13,0,0
EQUS "chaos", 13,0,0
EQUS "envard", 13,0
EQUS "insur", 13,0,0
EQUS "mission", 13

\\ No longer require pointer table but each entry must be exactly 32 bytes
\\ Does not have to be aligned but entries have to be fixed size
\\ Code to multiple by 32 probably takes up as much space as the previous pointer tables!

.menu_entries
EQUS " 1. Master Tracker              "
EQUS " 2. Exception                   "
EQUS " 3. Fluid Dynamics              "
EQUS " 4. Ice Fields                  "
EQUS " 5. Sonic Enters a Dance Club   "
EQUS " 6. Frozen Dancehall o/t Pharoah"
EQUS " 7. Magic beans                 "
EQUS " 8. LOL I am late Sorry         "
EQUS " 9. Collision Chaos             "
EQUS "10. En vard fyra javal          "
EQUS "11. Insurmountable              "
EQUS "12. Mission 76496               "
IF COMPILE_OPTION_EXIT
EQUS "Exit                            "
ENDIF


\\ Need to put this last as I don't know how to undo the character map!
\\ Map character ASCII values to the byte offset into our MODE 7 font
\\ This is "cunning" but only works because the font has fewer than 256/6 (42) glyphs..

MAPCHAR 'A', 1
MAPCHAR 'B', 4
MAPCHAR 'C', 7
MAPCHAR 'D', 10
MAPCHAR 'E', 13
MAPCHAR 'F', 16
MAPCHAR 'G', 19
MAPCHAR 'H', 22
MAPCHAR 'I', 25
MAPCHAR 'J', 28
MAPCHAR 'K', 31
MAPCHAR 'L', 34
MAPCHAR 'M', 37

MAPCHAR 'a', 1
MAPCHAR 'b', 4
MAPCHAR 'c', 7
MAPCHAR 'd', 10
MAPCHAR 'e', 13
MAPCHAR 'f', 16
MAPCHAR 'g', 19
MAPCHAR 'h', 22
MAPCHAR 'i', 25
MAPCHAR 'j', 28
MAPCHAR 'k', 31
MAPCHAR 'l', 34
MAPCHAR 'm', 37

MAPCHAR 'N', 81
MAPCHAR 'O', 84
MAPCHAR 'P', 87
MAPCHAR 'Q', 90
MAPCHAR 'R', 93
MAPCHAR 'S', 96
MAPCHAR 'T', 99
MAPCHAR 'U', 102
MAPCHAR 'V', 105
MAPCHAR 'W', 108
MAPCHAR 'X', 111
MAPCHAR 'Y', 114
MAPCHAR 'Z', 117

MAPCHAR 'n', 81
MAPCHAR 'o', 84
MAPCHAR 'p', 87
MAPCHAR 'q', 90
MAPCHAR 'r', 93
MAPCHAR 's', 96
MAPCHAR 't', 99
MAPCHAR 'u', 102
MAPCHAR 'v', 105
MAPCHAR 'w', 108
MAPCHAR 'x', 111
MAPCHAR 'y', 114
MAPCHAR 'z', 117

MAPCHAR '0', 161
MAPCHAR '1', 164
MAPCHAR '2', 167
MAPCHAR '3', 170
MAPCHAR '4', 173
MAPCHAR '5', 176
MAPCHAR '6', 179
MAPCHAR '7', 182
MAPCHAR '8', 185
MAPCHAR '9', 188
MAPCHAR '?', 191
MAPCHAR '!', 194
MAPCHAR '.', 197

MAPCHAR ' ', 241


\\ Scrolltext messages stored as font glyph byte offsets
.scrolltext_start

.demo_message
EQUS "BeebTracker scrolltext in the right place and now scrolled one pixel per frame. Looks pretty smooth! 0123456789?!. ", 0

.load_message
EQUS "Loading... ", 0

\\ ** ANY EQUS LINES AFTER THIS POINT WILL STILL CONTAIN REMAPPED CHARACTERS ** \\

.scrolltext_end

.menu_data_end

\ ******************************************************************
\ *	MODE 7 screen data
\ ******************************************************************

.mode7_data_start

.mode7_screen_data
INCBIN "screen3.mode7"

MENU_original_src_addr = mode7_screen_data + MENU_overlay_ypos * MODE7_char_width

.mode7_font_data				; we use 16/25 lines of this screen
INCBIN "font_5x5_shifted_trimmed.mode7.bin"

mode7_font_data_shifted = mode7_font_data + 8 * 40

.mode7_menu_data
INCBIN "menu_overlay_trimmed.mode7.bin"		; ditto, we only use ~8/25 lines of this screen

MENU_overlay_src_addr = mode7_menu_data		; stripped this off (+ MENU_overlay_ypos * MODE7_char_width)

.mode7_data_end

\ ******************************************************************
\ *	End address to be saved
\ ******************************************************************

.end



\ ******************************************************************
\ *	EXO VGM data file
\ * This must be compressed using the following flags:
\ * exomizer.exe raw -c -m 1024 <file.raw> -o <file.exo>
\ ******************************************************************

.VGM_stream_data
\\ Now loaded at run-time so don't know end of data!
.VGM_end_of_data


\ ******************************************************************
\ *	Print out code & data metrics
\ ******************************************************************

PRINT "------------------------------------------------------------"
PRINT "Code origin = ", ~CODE_ORIGIN
PRINT "Code size =", code_end-start
PRINT "Data size =", end-data_start
PRINT " menu data size =",menu_data_end-menu_data_start
PRINT " lookup tables size =",lookup_tables_end-lookup_tables_start
PRINT " note tables size =",note_tables_end-note_tables_start
PRINT " scrolltext size =",scrolltext_end-scrolltext_start
PRINT " MODE 7 screen size =", mode7_data_end-mode7_data_start
PRINT "Run-time vars (above origin) =", VGM_stream_data-end
PRINT "------------------------------------------------------------"
PRINT "Total size (disk) =", end-start
PRINT "Total size (code + data + vars above origin) =", VGM_stream_data-start
PRINT "Available memory (above origin) =", &7C00 - CODE_ORIGIN
PRINT "Max song size =", &7C00 - VGM_stream_data
PRINT "------------------------------------------------------------"


\ ******************************************************************
\ *	Save the code
\ ******************************************************************

SAVE "BeebTrk", start, end, main
PUTFILE "volume1/BotB 16433 Slimeball - Fluid Dynamics.raw.exo", "fluid", 0
PUTFILE "volume1/ice.raw.exo", "ice", 0
PUTFILE "volume1/BotB 7383 exception.raw.exo", "except", 0
PUTFILE "volume1/BotB 7832 MasterTracker.raw.exo", "master", 0
PUTFILE "volume1/BotB 4406 sonic_enters_a_dance_club.raw.exo", "sonic", 0
PUTFILE "volume1/BotB 16439 Chip Champion - frozen dancehall of the pharaoh.raw.exo", "pharoah", 0
PUTFILE "volume1/ne7-magic_beansmaster_system_psg.raw.exo", "magic", 0
PUTFILE "volume1/BotB 7639 lol i am late sorry.raw.exo", "sorry", 0
PUTFILE "volume1/Chris Kelly - SMS Power 15th Anniversary Competitions - Collision Chaos.raw.exo", "chaos", 0
PUTFILE "volume1/en vard fyra javel.raw.exo", "envard", 0
PUTFILE "volume1/insurmountable.raw.exo", "insur", 0
PUTFILE "volume1/MISSION76496.raw.exo", "mission", 0

IF _DEBUG			; only needed for debug purposes
PUTFILE "screen3.mode7", "screen", &7C00
PUTFILE "font_5x5.mode7", "font", &7C00
PUTFILE "font_5x5_shifted.mode7", "font2", &7C00
PUTFILE "menu_overlay.mode7", "menu", &7C00
ENDIF